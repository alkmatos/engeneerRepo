# Databricks notebook source
#*******************************************************************
# Responsável pelo desenvolvimento..: André Matos
# Data do desenvolvimento...........: Maio/2023
# Gerência..........................: Marcos Lopes
# Área..............................: TI HOLDING
#
# Padroniza as tabelas e atributos conforme THESAURUS,
# remove as mascaras dos CPF, CNPJ e CEP, e elimina os 
# espaçamentos laterais de todas colunas que são string.
# Ao final realiza a anonimização dos dados que foram pré
# validadas para espelhar na camada silver.
#
# IMPORTANTE: Este atendimento atenderá todas as demandas
# não havendo necessidades de novos desenvolvimentos, apenas adequações
# dependendo da necessidade devido alguma particularidade.
#  Deve-se apenas alterar os parâmetros contidos nos CMD2 e CMD3
#*******************************************************************

# COMMAND ----------

from pyspark.sql.functions import col, concat_ws, lit, sha2
import pandas as pd
from datetime import datetime,date
from dateutil.relativedelta import relativedelta

#* PARAMETROS FIXOS
SALT_VALUE1 = '6e657874'
SALT_VALUE2 = '74686f7468'
STR_CATALOGO="bs-dbricks-catalog-bare-tu"
BRONZE_SCHEMA = "bronze"
#* GRUPO QUE PODERÁ ENXERGAR OS DADOS SEM ESTAR ANONIMIZADOS
STR_GROUP_MEMBER='GRP-AZU-BSEG-BIDH-BARE-RDOA'

#* PARAMETROS AJUSTADOS
SILVER_SCHEMA = 'silver_T'

#* LOGS
dfPdLog  = pd.DataFrame(columns=['schema','tabela','status','observacao','dataExec','hora'])
LOG_SCHEMA = "logs_exec"
LOG_TABLE = "silver_logs"

# COMMAND ----------

listaSchemaDelta=(
"bs-dbricks-catalog-bare-tu;bronze;sicp_class_movto_negoc;['CCLASS_MOVTO_NEGOC','ICLASS_MOVTO_NEGOC','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['CCLASS_MOVTO_NEGOC','ICLASS_MOVTO_NEGOC','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['ICLASS_MOVTO_NEGOC'];tsicp_class_movto_negoc",
"bs-dbricks-catalog-bare-tu;bronze;sicp_class_ocupc_estbl;['CTPO_ESTBL','CCLASS_OCUPC_ESTBL','ICLASS_OCUPC_ESTBL','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['CTPO_ESTBL','CCLASS_OCUPC_ESTBL','ICLASS_OCUPC_ESTBL','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['ICLASS_OCUPC_ESTBL'];tsicp_class_ocupc_estbl",
"bs-dbricks-catalog-bare-tu;bronze;sicp_cober_item_segrd;['NCONTR_SEGUR','NVRSAO_CONTR','NITEM_CONTR','CCOBER_ORIGE','VDESC_COBER','VIOF','VMAX_FRANQ','VPERDA_MAX_POSVL','VPRMIO_LIQ','VPRMIO_TOT','VPRMIO_BRUTO','VMIN_FRANQ','VIS_COBER','VFRANQ_SEGUR','VDANO_MAX_PROVV','CRAMO_SEGUR','CTPO_COBER','PDESC_RISCO','PINDNZ_FRANQ','VADCIO_FRCTO','NQTD_DIA_FRANQ','CTPO_FRANQ','CRAMO_CTBIL','CPROCS_PLANO_SUSEP','CCOBER_SUSEP','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['NCONTR_SEGUR','NVRSAO_CONTR','NITEM_CONTR','CCOBER_ORIGE','VDESC_COBER','VIOF','VMAX_FRANQ','VPERDA_MAX_POSVL','VPRMIO_LIQ','VPRMIO_TOT','VPRMIO_BRUTO','VMIN_FRANQ','VIS_COBER','VFRANQ_SEGUR','VDANO_MAX_PROVV','CRAMO_SEGUR','CTPO_COBER','PDESC_RISCO','PINDNZ_FRANQ','VADCIO_FRCTO','NQTD_DIA_FRANQ','CTPO_FRANQ','CRAMO_CTBIL','CPROCS_PLANO_SUSEP','CCOBER_SUSEP','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['CCOBER_SUSEP', 'CTPO_FRANQ', 'CPROCS_PLANO_SUSEP'];tsicp_cober_item_segrd",
"bs-dbricks-catalog-bare-tu;bronze;sicp_comis_vrsao_contr_segur;['NCONTR_SEGUR','NVRSAO_CONTR','CCOMIS_VRSAO_CONTR_SEGUR','CSUCUR_SEGDR','CTPO_COMSN','PCOMIS_CONTR_SEGUR','VDETRM_COMIS','DREFT_COMIS_CONTR','CPSSOA_PROVI','CINSPT_CRRTR','CIND_SIT_COMSN','CIND_CRRTR_PRINC','CCPD_CRRTR','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['NCONTR_SEGUR','NVRSAO_CONTR','CCOMIS_VRSAO_CONTR_SEGUR','CSUCUR_SEGDR','CTPO_COMSN','PCOMIS_CONTR_SEGUR','VDETRM_COMIS','DREFT_COMIS_CONTR','CPSSOA_PROVI','CINSPT_CRRTR','CIND_SIT_COMSN','CIND_CRRTR_PRINC','CCPD_CRRTR','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['CIND_SIT_COMSN', 'CIND_CRRTR_PRINC'];tsicp_comis_vrsao_contr_segur",
"bs-dbricks-catalog-bare-tu;bronze;sicp_contr_segur;['NCONTR_SEGUR','CSRAMO_SEGUR','CTPO_CONTR','CTPO_ORIGE_SEGUR','CTPO_SIST_ORIGE_SAP','DEMIS_PPSTA','NAPOLC','NAPOLC_SUSEP','NCONTR_SEGUR_ANTER','NCONTR_SEGUR_MAE','NPPSTA','PCOMIS_APOLC','VCOTAC_MOEDA_EMIS','NCONTR_SIST_ORIGE','NCERTF','DCAD_CONTR','CSUCUR_SEGDR','CINSPT_SEGDR','CMOEDA_EMIS','CPRODT_CORP','CPRODT_ORIGE','CRAMO_SEGUR','CSIST_ORIGE_COBR','CSIST_ORIGE_REP_ATIVO','CSIST','CCONFG_CANAL_CORP','CIND_COBR_UNFCA','CIND_CONTR_ATIVO','CESTAG_NEGOC','CCLASS_BONUS','CCIA_SEGDR','CAGREG_CONTR','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['NCONTR_SEGUR','CSRAMO_SEGUR','CTPO_CONTR','CTPO_ORIGE_SEGUR','CTPO_SIST_ORIGE_SAP','DEMIS_PPSTA','NAPOLC','NAPOLC_SUSEP','NCONTR_SEGUR_ANTER','NCONTR_SEGUR_MAE','NPPSTA','PCOMIS_APOLC','VCOTAC_MOEDA_EMIS','NCONTR_SIST_ORIGE','NCERTF','DCAD_CONTR','CSUCUR_SEGDR','CINSPT_SEGDR','CMOEDA_EMIS','CPRODT_CORP','CPRODT_ORIGE','CRAMO_SEGUR','CSIST_ORIGE_COBR','CSIST_ORIGE_REP_ATIVO','CSIST','CCONFG_CANAL_CORP','CIND_COBR_UNFCA','CIND_CONTR_ATIVO','CESTAG_NEGOC','CCLASS_BONUS','CCIA_SEGDR','CAGREG_CONTR','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['NCONTR_SIST_ORIGE', 'NAPOLC_SUSEP', 'CSIST', 'CSIST_ORIGE_COBR', 'CIND_CONTR_ATIVO', 'CIND_COBR_UNFCA', 'CSIST_ORIGE_REP_ATIVO', 'CTPO_SIST_ORIGE_SAP'];tsicp_contr_segur",
"bs-dbricks-catalog-bare-tu;bronze;sicp_cssro_pcela_vrsao_contr;['NCONTR_SEGUR','NVRSAO_CONTR','CCIA_SEGDR','NPCELA','VPRMIO_LIQ_PCELA_CSSRO','VPRMIO_TRFIO_CSSRO','VDESC_PCELA_CSSRO','VCOMIS_PCELA_CSSRO','VADCIO_FRCTO_PCELA_CSSRO','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['NCONTR_SEGUR','NVRSAO_CONTR','CCIA_SEGDR','NPCELA','VPRMIO_LIQ_PCELA_CSSRO','VPRMIO_TRFIO_CSSRO','VDESC_PCELA_CSSRO','VCOMIS_PCELA_CSSRO','VADCIO_FRCTO_PCELA_CSSRO','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];[];tsicp_cssro_pcela_vrsao_contr",
"bs-dbricks-catalog-bare-tu;bronze;sicp_cssro_pcela_vrsao_ramo;['NCONTR_SEGUR','NVRSAO_CONTR','CCIA_SEGDR','CRAMO_SEGUR','VIMPTC_SEGRD_CSSRO','VPRMIO_LIQ_PCELA_CSSRO','PRAMO_CSSRO','CPROCS_PLANO_SUSEP','CIND_RAMO_PRINC','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['NCONTR_SEGUR','NVRSAO_CONTR','CCIA_SEGDR','CRAMO_SEGUR','VIMPTC_SEGRD_CSSRO','VPRMIO_LIQ_PCELA_CSSRO','PRAMO_CSSRO','CPROCS_PLANO_SUSEP','CIND_RAMO_PRINC','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['CPROCS_PLANO_SUSEP', 'CIND_RAMO_PRINC'];tsicp_cssro_pcela_vrsao_ramo",
"bs-dbricks-catalog-bare-tu;bronze;sicp_cssro_vrsao_contr;['NCONTR_SEGUR','NVRSAO_CONTR','CCIA_SEGDR','VTOT_COMIS','VTOT_LIQ','VTOT_PRMIO_TRFIO','VTOT_DESC','PCOMIS','PDESC_SEGRD','PPRTCP_CIA','RMOEDA_CSSRO','VCOTAC_MOEDA_CSSRO','VREPAS_PGTO','VTOT_ADCIO_FRCTO','DREPAS_PGTO','DRETOR_CSSRO','NORD_CNGRE','DCOTAC_MOEDA','DCANCT_CNGRE','CTPO_CIA_SEGDR_CSSRO','CSIT_CSSRO','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['NCONTR_SEGUR','NVRSAO_CONTR','CCIA_SEGDR','VTOT_COMIS','VTOT_LIQ','VTOT_PRMIO_TRFIO','VTOT_DESC','PCOMIS','PDESC_SEGRD','PPRTCP_CIA','RMOEDA_CSSRO','VCOTAC_MOEDA_CSSRO','VREPAS_PGTO','VTOT_ADCIO_FRCTO','DREPAS_PGTO','DRETOR_CSSRO','NORD_CNGRE','DCOTAC_MOEDA','DCANCT_CNGRE','CTPO_CIA_SEGDR_CSSRO','CSIT_CSSRO','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['RMOEDA_CSSRO'];tsicp_cssro_vrsao_contr",
"bs-dbricks-catalog-bare-tu;bronze;sicp_cta_corr_intgc;['NCONTR_SEGUR','NVRSAO_CONTR','CPSSOA','CTPO_PAPEL_PSSOA','NSEQ_CTA_CORR','CSEGDA_DV_CNT_CORR','CTPO_CTA_BCRIA','NCTA_CORR','CIND_CTA_BDSCO','CPRIM_DV_AG','CPRIM_DV_CTA_CORR','CSEGDA_DV_AG','CDV_CTA_CORR','CDV_AG','CBCO','CAG_BCRIA','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];['CBCO', 'CAG_BCRIA', 'CDV_AG', 'CPRIM_DV_AG', 'CSEGDA_DV_AG', 'NCTA_CORR', 'CTPO_CTA_BCRIA'];['NCONTR_SEGUR','NVRSAO_CONTR','CPSSOA','CTPO_PAPEL_PSSOA','NSEQ_CTA_CORR','CSEGDA_DV_CNT_CORR','CTPO_CTA_BCRIA','NCTA_CORR','CIND_CTA_BDSCO','CPRIM_DV_AG','CPRIM_DV_CTA_CORR','CSEGDA_DV_AG','CDV_CTA_CORR','CDV_AG','CBCO','CAG_BCRIA','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['CDV_AG', 'CPRIM_DV_AG', 'CSEGDA_DV_AG', 'CDV_CTA_CORR', 'CPRIM_DV_CTA_CORR', 'CSEGDA_DV_CNT_CORR', 'CIND_CTA_BDSCO'];tsicp_cta_corr_intgc",
"bs-dbricks-catalog-bare-tu;bronze;sicp_devlc_pcela_cober;['CCIA_SEGDR','CRAMO_SEGUR','NCONTR_SEGUR','NVRSAO_CONTR','NPCELA','NITEM_CONTR','CCOBER_ORIGE','NPGTO_CONTR','VPGTO_CONTR','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['CCIA_SEGDR','CRAMO_SEGUR','NCONTR_SEGUR','NVRSAO_CONTR','NPCELA','NITEM_CONTR','CCOBER_ORIGE','NPGTO_CONTR','VPGTO_CONTR','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];[];tsicp_devlc_pcela_cober",
"bs-dbricks-catalog-bare-tu;bronze;sicp_erro_crtca_pcela_cobr;['NSEQ_ERRO_PROCM','NCONTR_SEGUR','NVRSAO_CONTR','NPCELA','RERRO_PROCM','RCPO_ERRO','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['NSEQ_ERRO_PROCM','NCONTR_SEGUR','NVRSAO_CONTR','NPCELA','RERRO_PROCM','RCPO_ERRO','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['RERRO_PROCM', 'RCPO_ERRO'];tsicp_erro_crtca_pcela_cobr",
"bs-dbricks-catalog-bare-tu;bronze;sicp_erro_procm_titlo_cobr;['NSEQ_TITLO_COBR','NSEQ_ERRO_PROCM','RERRO_PROCM','RCPO_ERRO','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['NSEQ_TITLO_COBR','NSEQ_ERRO_PROCM','RERRO_PROCM','RCPO_ERRO','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['RERRO_PROCM', 'RCPO_ERRO'];tsicp_erro_procm_titlo_cobr",
"bs-dbricks-catalog-bare-tu;bronze;sicp_etapa_procs_sist;['CETAPA_PROCS_SIST','IETAPA_PROCS_SIST','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['CETAPA_PROCS_SIST','IETAPA_PROCS_SIST','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['IETAPA_PROCS_SIST'];tsicp_etapa_procs_sist",
"bs-dbricks-catalog-bare-tu;bronze;sicp_freq_excuc_servc;['CFREQ_EXCUC_SERVC','IFREQ_EXCUC_SERVC','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['CFREQ_EXCUC_SERVC','IFREQ_EXCUC_SERVC','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['IFREQ_EXCUC_SERVC'];tsicp_freq_excuc_servc",
"bs-dbricks-catalog-bare-tu;bronze;sicp_gerac_midia;['NSEQ_GERAC_MIDIA','NCONTR_SEGUR','NSEQ_FRMUL_GERAC_MIDIA','NVRSAO_CONTR','NTITLO_COBR','DENVIO_MIDIA','CVNCLO_NEGOC','CTPO_PAPEL_PSSOA','CPSSOA_CORP','CIND_AVISO_RECEB','CDV_TITLO_COBR','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['NSEQ_GERAC_MIDIA','NCONTR_SEGUR','NSEQ_FRMUL_GERAC_MIDIA','NVRSAO_CONTR','NTITLO_COBR','DENVIO_MIDIA','CVNCLO_NEGOC','CTPO_PAPEL_PSSOA','CPSSOA_CORP','CIND_AVISO_RECEB','CDV_TITLO_COBR','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['CDV_TITLO_COBR', 'CIND_AVISO_RECEB'];tsicp_gerac_midia",
"bs-dbricks-catalog-bare-tu;bronze;sicp_id_retor_movto_sap;['CID_MSGEM_SAP','RID_MSGEM_SAP','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['CID_MSGEM_SAP','RID_MSGEM_SAP','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['RID_MSGEM_SAP'];tsicp_id_retor_movto_sap",
"bs-dbricks-catalog-bare-tu;bronze;sicp_instr_titlo_cobr;['NSEQ_TITLO_COBR','NSEQ_INSTR_TITLO','RINSTR_PGTO','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['NSEQ_TITLO_COBR','NSEQ_INSTR_TITLO','RINSTR_PGTO','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['RINSTR_PGTO'];tsicp_instr_titlo_cobr",
"bs-dbricks-catalog-bare-tu;bronze;sicp_item_segrd_ender;['NCONTR_SEGUR','NVRSAO_CONTR','NITEM_CONTR','CTPO_ESTBL','CSGL_UF_RISCO','CCLASS_OCUPC_ESTBL','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['NCONTR_SEGUR','NVRSAO_CONTR','NITEM_CONTR','CTPO_ESTBL','CSGL_UF_RISCO','CCLASS_OCUPC_ESTBL','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['CSGL_UF_RISCO'];tsicp_item_segrd_ender",
"bs-dbricks-catalog-bare-tu;bronze;sicp_item_segrd_intgc;['NCONTR_SEGUR','NVRSAO_CONTR','NITEM_CONTR','RITEM_CONTR','CTPO_ITEM_SEGRD','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['NCONTR_SEGUR','NVRSAO_CONTR','NITEM_CONTR','RITEM_CONTR','CTPO_ITEM_SEGRD','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['RITEM_CONTR'];tsicp_item_segrd_intgc",
"bs-dbricks-catalog-bare-tu;bronze;sicp_lote_movto_negoc;['NLOTE_MOVTO_NEGOC','DRECPC_MOVTO_NEGOC','QREG_REJTD','DREFT_MOVTO_NEGOC','DSOLTC_NRO_LOTE','QREG_RECBD','ISGL_SIST_ORIGE','DGERAC_AGNDA_SERVC','DCARGA_MOVTO_NEGOC','CSIT_LOTE_MOVTO','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['NLOTE_MOVTO_NEGOC','DRECPC_MOVTO_NEGOC','QREG_REJTD','DREFT_MOVTO_NEGOC','DSOLTC_NRO_LOTE','QREG_RECBD','ISGL_SIST_ORIGE','DGERAC_AGNDA_SERVC','DCARGA_MOVTO_NEGOC','CSIT_LOTE_MOVTO','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['ISGL_SIST_ORIGE'];tsicp_lote_movto_negoc",
"bs-dbricks-catalog-bare-tu;bronze;sicp_movto_procs_sist;['CMOVTO_PROCS_SIST','CETAPA_PROCS_SIST','CERRO_OPER','CPROG_EXCUC','CRESP_EXCUC_PROCS','CSERVC_INTGC_CORP','CSIT_EXCUC_PROCS','CSUCUR_SEGDR','CTPO_MOVTO_NEGOC','CTPO_REG','DRECPC_MOVTO_NEGOC','NCERTF','NENDSS','NLOTE_MOVTO_NEGOC','NVRSAO_CONTR','QREG_LOTE_ENVIO','RERRO_OPER','WAREA_COMUN','QREG_REJTD_LOTE','QREG_ERRO_CRTCA','NPPSTA','NFAT_PRODT','NCONTR_SEGUR','NAPOLC','DMOVTO_PROCS_SIST','CTPO_PROCM','CTPO_DOCTO','CSRAMO_SEGUR','CSIST','CSEGUR_AFIN','CRAMO_SEGUR','CPRODT_ORIGE','CINDCD_EMIS','CCIA_SEGDR','AHORA_INIC_PROCS','AHORA_FIM_PROCS','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['CMOVTO_PROCS_SIST','CETAPA_PROCS_SIST','CERRO_OPER','CPROG_EXCUC','CRESP_EXCUC_PROCS','CSERVC_INTGC_CORP','CSIT_EXCUC_PROCS','CSUCUR_SEGDR','CTPO_MOVTO_NEGOC','CTPO_REG','DRECPC_MOVTO_NEGOC','NCERTF','NENDSS','NLOTE_MOVTO_NEGOC','NVRSAO_CONTR','QREG_LOTE_ENVIO','RERRO_OPER','WAREA_COMUN','QREG_REJTD_LOTE','QREG_ERRO_CRTCA','NPPSTA','NFAT_PRODT','NCONTR_SEGUR','NAPOLC','DMOVTO_PROCS_SIST','CTPO_PROCM','CTPO_DOCTO','CSRAMO_SEGUR','CSIST','CSEGUR_AFIN','CRAMO_SEGUR','CPRODT_ORIGE','CINDCD_EMIS','CCIA_SEGDR','DHORA_INIC_PROCS','DHORA_FIM_PROCS','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['CSIST', 'CINDCD_EMIS', 'CPROG_EXCUC', 'CERRO_OPER', 'RERRO_OPER', 'WAREA_COMUN', 'CRESP_EXCUC_PROCS', 'CTPO_PROCM'];tsicp_movto_procs_sist",
"bs-dbricks-catalog-bare-tu;bronze;sicp_movto_vrsao_contr;['NLOTE_MOVTO_NEGOC','CTPO_MOVTO_NEGOC','NCONTR_SEGUR','NVRSAO_CONTR','DRECPC_MOVTO_NEGOC','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['NLOTE_MOVTO_NEGOC','CTPO_MOVTO_NEGOC','NCONTR_SEGUR','NVRSAO_CONTR','DRECPC_MOVTO_NEGOC','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];[];tsicp_movto_vrsao_contr",
"bs-dbricks-catalog-bare-tu;bronze;sicp_msgem_pgto;['CSEQ_MSGEM_PGTO','NCONTR_SEGUR','NPGTO_CONTR','RMSGEM_PGTO','DENVIO_PGTO','CMSGEM_PGTO','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['CSEQ_MSGEM_PGTO','NCONTR_SEGUR','NPGTO_CONTR','RMSGEM_PGTO','DENVIO_PGTO','CMSGEM_PGTO','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['CMSGEM_PGTO', 'RMSGEM_PGTO'];tsicp_msgem_pgto",
"bs-dbricks-catalog-bare-tu;bronze;sicp_msgem_titlo_cobr;['NSEQ_TITLO_COBR','NSEQ_MSGEM_TITLO','CMSGEM_PDRAO_IMPRE','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['NSEQ_TITLO_COBR','NSEQ_MSGEM_TITLO','CMSGEM_PDRAO_IMPRE','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];[];tsicp_msgem_titlo_cobr",
"bs-dbricks-catalog-bare-tu;bronze;sicp_nro_apolc_certf_endss;['CSUCUR_SEGDR','CCIA_SEGDR','NANO_APOLC','NAPOLC','NCERTF','NENDSS','CGRP_RAMO_SUSEP','CRAMO_SUSEP','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['CSUCUR_SEGDR','CCIA_SEGDR','NANO_APOLC','NAPOLC','NCERTF','NENDSS','CGRP_RAMO_SUSEP','CRAMO_SUSEP','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];[];tsicp_nro_apolc_certf_endss",
"bs-dbricks-catalog-bare-tu;bronze;sicp_papel_pssoa_contr;['CPAPEL_PSSOA_CONTR','IPAPEL_PSSOA_CONTR','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['CPAPEL_PSSOA_CONTR','IPAPEL_PSSOA_CONTR','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['IPAPEL_PSSOA_CONTR'];tsicp_papel_pssoa_contr",
"bs-dbricks-catalog-bare-tu;bronze;sicp_pcela_comis;['NCONTR_SEGUR','NVRSAO_CONTR','CCOMIS_VRSAO_CONTR_SEGUR','NPCELA','CCONDC_PCELA','VCOMIS_RECUP','VCOMIS_PG','VCOMIS_ANTCP','VCOMIS_NORML','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['NCONTR_SEGUR','NVRSAO_CONTR','CCOMIS_VRSAO_CONTR_SEGUR','NPCELA','CCONDC_PCELA','VCOMIS_RECUP','VCOMIS_PG','VCOMIS_ANTCP','VCOMIS_NORML','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];[];tsicp_pcela_comis",
"bs-dbricks-catalog-bare-tu;bronze;sicp_pcela_pgto_estrn;['NCONTR_SEGUR','NPGTO_CONTR','NVRSAO_CONTR','NPCELA','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['NCONTR_SEGUR','NPGTO_CONTR','NVRSAO_CONTR','NPCELA','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];[];tsicp_pcela_pgto_estrn",
"bs-dbricks-catalog-bare-tu;bronze;sicp_pcela_vrsao_contr;['NCONTR_SEGUR','NVRSAO_CONTR','NPCELA','DCANCT_PCELA','DCTRL_LIM_VCTO','DEMIS_PCELA','DENVIO_COBR','DFNAL_VGCIA_PCELA','DINIC_VGCIA_PCELA','DLIM_CONCS_DESC','DPGTO_PCELA','DRCOLH_IOF','DREFT_COBR_UNFCA','DULT_OPER_COBR','DVCTO_PCELA','NDV_TITLO_COBR','NFAT_COBR','NSEQ_TITLO_COBR','NTITLO_COBR','PJURO_FRCTO','PMULTA_PCELA_COBR','QDIA_CORTE_PCELA','RLIN_PREEN_BLETO','RLIN_PREEN_BLETO_COMPL','VACRES_DIVRS','VCOMIS_CATAO_CREDT','VCOMIS_PCELA','VCOTAC_MOEDA_PGTO','VDESP_DIVRS','VDESP_TARIF_COBR','VDEVLC_COMIS_CRRTR','VIOF_PCELA_PG','VJURO_ATRSO_PCELA','VMORA_DIA','VPRMIO_BRUTO','VPRMIO_LIQ','VPRMIO_TOT','VMULTA_ATRSO_PCELA','VIOF_PCELA_EMTDO','VDESC_PCELA','VADCIO_FRCTO_PCELA','QMOEDA_ESTRG','PDESC_NMNAL_PCELA','NSEQ_CTA_CORR','NCTRL_DOCTO_UNFCA','DRETOR_COBR','DLIM_PGTO_PCELA','DENVIO_COMIS_CRRTR','DCOTAC_MOEDA','CIND_PCELA_REATV','CIND_PGTO_COMIS','CMOEDA_PCELA','CRZ_CTA_CORR_SACDO','CSIT_CTBIL_PCELA','CSIT_PCELA_COBR','CSIT_PCELA_SEGUR','CSIT_RETOR_COBR','CTPO_AMBTE_GERAC_PCELA','CTPO_ORIGE_PCELA','CTPO_PCELA_COBR','DCADTO_REG','CTPO_PAPEL_PSSOA','CPSSOA_CTA_CORR','CFORMA_PGTO_PCELA','CIND_CALC_MORA','CIND_COBR_ADCIO','CIND_PCELA_PG','CIND_PCELA_PRE_IMPRS','CIND_CALC_IOF','CFORMA_COBR_PCELA','CEVNTO_COBR','CDV_TITLO_COBR','CDOCTO_GERDR_SAP','CCNSTT_COBR_UNFCA','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];['CRZ_CTA_CORR_SACDO'];['NCONTR_SEGUR','NVRSAO_CONTR','NPCELA','DCANCT_PCELA','DCTRL_LIM_VCTO','DEMIS_PCELA','DENVIO_COBR','DFNAL_VGCIA_PCELA','DINIC_VGCIA_PCELA','DLIM_CONCS_DESC','DPGTO_PCELA','DRCOLH_IOF','DREFT_COBR_UNFCA','DULT_OPER_COBR','DVCTO_PCELA','NDV_TITLO_COBR','NFAT_COBR','NSEQ_TITLO_COBR','NTITLO_COBR','PJURO_FRCTO','PMULTA_PCELA_COBR','QDIA_CORTE_PCELA','RLIN_PREEN_BLETO','RLIN_PREEN_BLETO_COMPL','VACRES_DIVRS','VCOMIS_CATAO_CREDT','VCOMIS_PCELA','VCOTAC_MOEDA_PGTO','VDESP_DIVRS','VDESP_TARIF_COBR','VDEVLC_COMIS_CRRTR','VIOF_PCELA_PG','VJURO_ATRSO_PCELA','VMORA_DIA','VPRMIO_BRUTO','VPRMIO_LIQ','VPRMIO_TOT','VMULTA_ATRSO_PCELA','VIOF_PCELA_EMTDO','VDESC_PCELA','VADCIO_FRCTO_PCELA','QMOEDA_ESTRG','PDESC_NMNAL_PCELA','NSEQ_CTA_CORR','NCTRL_DOCTO_UNFCA','DRETOR_COBR','DLIM_PGTO_PCELA','DENVIO_COMIS_CRRTR','DCOTAC_MOEDA','CIND_PCELA_REATV','CIND_PGTO_COMIS','CMOEDA_PCELA','CRZ_CTA_CORR_SACDO','CSIT_CTBIL_PCELA','CSIT_PCELA_COBR','CSIT_PCELA_SEGUR','CSIT_RETOR_COBR','CTPO_AMBTE_GERAC_PCELA','CTPO_ORIGE_PCELA','CTPO_PCELA_COBR','DCADTO_REG','CTPO_PAPEL_PSSOA','CPSSOA_CTA_CORR','CFORMA_PGTO_PCELA','CIND_CALC_MORA','CIND_COBR_ADCIO','CIND_PCELA_PG','CIND_PCELA_PRE_IMPRS','CIND_CALC_IOF','CFORMA_COBR_PCELA','CEVNTO_COBR','CDV_TITLO_COBR','CDOCTO_GERDR_SAP','CCNSTT_COBR_UNFCA','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['CDV_TITLO_COBR', 'CIND_PCELA_REATV', 'CIND_PGTO_COMIS', 'CFORMA_COBR_PCELA', 'RLIN_PREEN_BLETO', 'RLIN_PREEN_BLETO_COMPL', 'CIND_CALC_MORA', 'CIND_CALC_IOF', 'CTPO_ORIGE_PCELA', 'CTPO_AMBTE_GERAC_PCELA', 'CIND_COBR_ADCIO', 'CIND_PCELA_PRE_IMPRS', 'CIND_PCELA_PG', 'CDOCTO_GERDR_SAP'];tsicp_pcela_vrsao_contr",
"bs-dbricks-catalog-bare-tu;bronze;sicp_pcela_vrsao_ramo;['CCIA_SEGDR','CRAMO_SEGUR','NCONTR_SEGUR','NVRSAO_CONTR','NPCELA','VPRMIO_LIQ','VPRMIO_TOT','VDEVLC_COMIS_CRRTR','VIOF_PCELA_EMTDO','VJURO_ATRSO_PCELA','VMULTA_ATRSO_PCELA','VPRMIO_BRUTO','VIOF_PCELA_PG','VDESC_PCELA','VCOMIS_PCELA','VADCIO_FRCTO_PCELA','PPRTCP_CIA','CIND_RAMO_PRINC','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['CCIA_SEGDR','CRAMO_SEGUR','NCONTR_SEGUR','NVRSAO_CONTR','NPCELA','VPRMIO_LIQ','VPRMIO_TOT','VDEVLC_COMIS_CRRTR','VIOF_PCELA_EMTDO','VJURO_ATRSO_PCELA','VMULTA_ATRSO_PCELA','VPRMIO_BRUTO','VIOF_PCELA_PG','VDESC_PCELA','VCOMIS_PCELA','VADCIO_FRCTO_PCELA','PPRTCP_CIA','CIND_RAMO_PRINC','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['CIND_RAMO_PRINC'];tsicp_pcela_vrsao_ramo",
"bs-dbricks-catalog-bare-tu;bronze;sicp_pgto_contr_cheq;['NCONTR_SEGUR','NPGTO_CONTR','DT_CANCT_CHEQ','DEMIS_CHEQ','DT_PRESC_CHEQ','NCHEQ_OPER','IORG_EMISR_CHEQ','DT_COMPE_CHEQ','DDEVLC_CHEQ','CSIT_CHEQ_OPER','CMATR_FUNC_EMISR','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['NCONTR_SEGUR','NPGTO_CONTR','DT_CANCT_CHEQ','DEMIS_CHEQ','DT_PRESC_CHEQ','NCHEQ_OPER','IORG_EMISR_CHEQ','DT_COMPE_CHEQ','DDEVLC_CHEQ','CSIT_CHEQ_OPER','CMATR_FUNC_EMISR','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['IORG_EMISR_CHEQ', 'CMATR_FUNC_EMISR'];tsicp_pgto_contr_cheq",
"bs-dbricks-catalog-bare-tu;bronze;sicp_pgto_contr_cta;['NCONTR_SEGUR','NPGTO_CONTR','NSEQ_CTA_CORR','NVRSAO_CONTR','CTPO_PAPEL_PSSOA','CTPO_ORD_CREDT','CTPO_OPER_BCRIA','CSIT_PGTO_CTA','CPSSOA','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['NCONTR_SEGUR','NPGTO_CONTR','NSEQ_CTA_CORR','NVRSAO_CONTR','CTPO_PAPEL_PSSOA','CTPO_ORD_CREDT','CTPO_OPER_BCRIA','CSIT_PGTO_CTA','CPSSOA','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['CTPO_ORD_CREDT'];tsicp_pgto_contr_cta",
"bs-dbricks-catalog-bare-tu;bronze;sicp_pgto_contr_intgc;['NCONTR_SEGUR','NPGTO_CONTR','VPGTO_CONTR','CTPO_PAPEL_PSSOA','CTPO_PGTO','CVDDOR_ADM_CATAO','DAGNDA_RESTI','DAGREG_RESTI','DCOTAC_MOEDA','NCOD_SEGRC_CATAO','NMES_ANO_VALDD','NVRSAO_CONTR','VCOMIS_RECUP','VIOF_PGTO_CONTR','VCOTAC_MOEDA_PGTO','NPCELA_PG','DPGTO_CONTR','CVNCLO_NEGOC','CTPO_FORMA_PGTO','CNRO_CATAO_CREDT','CPSSOA','CSIT_AGNDA_PGTO_RESTI','CMOEDA_PCELA','CIND_CATAO_EMTDO_BDSCO','CINDCD_CALC_COMIS','CADM_CATAO_CREDT','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];['CADM_CATAO_CREDT', 'CNRO_CATAO_CREDT', 'NMES_ANO_VALDD', 'NCOD_SEGRC_CATAO', 'CIND_CATAO_EMTDO_BDSCO'];['NCONTR_SEGUR','NPGTO_CONTR','VPGTO_CONTR','CTPO_PAPEL_PSSOA','CTPO_PGTO','CVDDOR_ADM_CATAO','DAGNDA_RESTI','DAGREG_RESTI','DCOTAC_MOEDA','NCOD_SEGRC_CATAO','NMES_ANO_VALDD','NVRSAO_CONTR','VCOMIS_RECUP','VIOF_PGTO_CONTR','VCOTAC_MOEDA_PGTO','NPCELA_PG','DPGTO_CONTR','CVNCLO_NEGOC','CTPO_FORMA_PGTO','CNRO_CATAO_CREDT','CPSSOA','CSIT_AGNDA_PGTO_RESTI','CMOEDA_PCELA','CIND_CATAO_EMTDO_BDSCO','CINDCD_CALC_COMIS','CADM_CATAO_CREDT','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['CNRO_CATAO_CREDT', 'CIND_CATAO_EMTDO_BDSCO'];tsicp_pgto_contr_intgc",
"bs-dbricks-catalog-bare-tu;bronze;sicp_pgto_devlc_pcela;['NCONTR_SEGUR','NPGTO_CONTR','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['NCONTR_SEGUR','NPGTO_CONTR','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];[];tsicp_pgto_devlc_pcela",
"bs-dbricks-catalog-bare-tu;bronze;sicp_pgto_endss_devlc;['NCONTR_SEGUR','NPGTO_CONTR','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['NCONTR_SEGUR','NPGTO_CONTR','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];[];tsicp_pgto_endss_devlc",
"bs-dbricks-catalog-bare-tu;bronze;sicp_prodt_sist_orige;['CSIST','CPRODT_ORIGE','CANTEC_COMIS','CIND_RSSRO','VMIN_RSSRO','IPRODT_ORIGE','CORIGE_COBR','CIND_UTILZ_AVERB','CIND_INTFC_COBR','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['CSIST','CPRODT_ORIGE','CANTEC_COMIS','CIND_RSSRO','VMIN_RSSRO','IPRODT_ORIGE','CORIGE_COBR','CIND_UTILZ_AVERB','CIND_INTFC_COBR','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['CSIST', 'IPRODT_ORIGE', 'CIND_UTILZ_AVERB', 'CORIGE_COBR', 'CIND_INTFC_COBR', 'CANTEC_COMIS', 'CIND_RSSRO '];tsicp_prodt_sist_orige",
"bs-dbricks-catalog-bare-tu;bronze;sicp_pssoa_contr_segur;['NCONTR_SEGUR','NVRSAO_CONTR','CPSSOA','CTPO_PAPEL_PSSOA','NSEQ_PSSOA_CONTR_SEGUR','DINCL_PSSOA_CONTR','DINATV_PSSOA_CONTR','CVNCLO_NEGOC','CTPO_PPRIE_CNTAT','CIND_SEGRD_PRINC','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['NCONTR_SEGUR','NVRSAO_CONTR','CPSSOA','CTPO_PAPEL_PSSOA','NSEQ_PSSOA_CONTR_SEGUR','DINCL_PSSOA_CONTR','DINATV_PSSOA_CONTR','CVNCLO_NEGOC','CTPO_PPRIE_CNTAT','CIND_SEGRD_PRINC','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['CIND_SEGRD_PRINC', 'CTPO_PPRIE_CNTAT'];tsicp_pssoa_contr_segur",
"bs-dbricks-catalog-bare-tu;bronze;sicp_pssoa_contr_vnclo_negoc;['NCONTR_SEGUR','NVRSAO_CONTR','CPSSOA','CTPO_PAPEL_PSSOA','CVNCLO_NEGOC','DINATV_VNCLO','DCAD_VNCLO','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['NCONTR_SEGUR','NVRSAO_CONTR','CPSSOA','CTPO_PAPEL_PSSOA','CVNCLO_NEGOC','DINATV_VNCLO','DCAD_VNCLO','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];[];tsicp_pssoa_contr_vnclo_negoc",
"bs-dbricks-catalog-bare-tu;bronze;sicp_retor_comun_sap;['NCONTR_SEGUR','NVRSAO_CONTR','AMOVTO_RETOR','DENVIO_MOVTO','NPCELA','RCONTD_CPO_ERRO','RERRO_SQL','RERRO_TBELA_SQL','CID_UNIC_SIST_PRODT','CRETOR_MOVTO','CTPO_MOVTO_NEGOC','CID_MSGEM_SAP','CERRO_SQL','CCPO_ERRO_RETOR','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['NCONTR_SEGUR','NVRSAO_CONTR','DMOVTO_RETOR','DENVIO_MOVTO','NPCELA','RCONTD_CPO_ERRO','RERRO_SQL','RERRO_TBELA_SQL','CID_UNIC_SIST_PRODT','CRETOR_MOVTO','CTPO_MOVTO_NEGOC','CID_MSGEM_SAP','CERRO_SQL','CCPO_ERRO_RETOR','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['CID_UNIC_SIST_PRODT', 'CRETOR_MOVTO', 'RCONTD_CPO_ERRO', 'RERRO_SQL', 'RERRO_TBELA_SQL'];tsicp_retor_comun_sap",
"bs-dbricks-catalog-bare-tu;bronze;sicp_servc_intgc_agnda;['DSERVC_AGNDA','DRECPC_MOVTO_NEGOC','NCONTR_SEGUR','NLOTE_MOVTO_NEGOC','NPCELA_SERVC_AGNDA','NVRSAO_CONTR','CTPO_RETOR_REG_SAP','DEXCUC_PREVT','DINIC_VGCIA_REG','DEXCUC_REALZ','CTPO_MOVTO_NEGOC','CSIT_AGNDA','CSERVC_INTGC_CORP','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['DSERVC_AGNDA','DRECPC_MOVTO_NEGOC','NCONTR_SEGUR','NLOTE_MOVTO_NEGOC','NPCELA_SERVC_AGNDA','NVRSAO_CONTR','CTPO_RETOR_REG_SAP','DEXCUC_PREVT','DINIC_VGCIA_REG','DEXCUC_REALZ','CTPO_MOVTO_NEGOC','CSIT_AGNDA','CSERVC_INTGC_CORP','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];[];tsicp_servc_intgc_agnda",
"bs-dbricks-catalog-bare-tu;bronze;sicp_servc_intgc_corp;['CSERVC_INTGC_CORP','DINIC_VGCIA_REG','ISERVC_INTGC_CORP','DULT_ATULZ','DFIM_VGCIA','CSIT_REG_INTGC','CRESP_ULT_ATULZ','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['CSERVC_INTGC_CORP','DINIC_VGCIA_REG','ISERVC_INTGC_CORP','DULT_ATULZ','DFIM_VGCIA','CSIT_REG_INTGC','CRESP_ULT_ATULZ','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['ISERVC_INTGC_CORP', 'CRESP_ULT_ATULZ'];tsicp_servc_intgc_corp",
"bs-dbricks-catalog-bare-tu;bronze;sicp_servc_tpo_movto;['CSERVC_INTGC_CORP','CTPO_MOVTO_NEGOC','DINIC_VGCIA_REG','DFIM_VGCIA','IAPLIC_INTGC','NDIA_MES_EXCUC','NDIA_SMNAL_EXCUC','QDIA_PROX_EXCUC','NMES_EXCUC','DULT_ATULZ','CSIT_REG_INTGC','CRESP_ULT_ATULZ','CFREQ_EXCUC_SERVC','CAJUST_DIA_UTIL','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['CSERVC_INTGC_CORP','CTPO_MOVTO_NEGOC','DINIC_VGCIA_REG','DFIM_VGCIA','IAPLIC_INTGC','NDIA_MES_EXCUC','NDIA_SMNAL_EXCUC','QDIA_PROX_EXCUC','NMES_EXCUC','DULT_ATULZ','CSIT_REG_INTGC','CRESP_ULT_ATULZ','CFREQ_EXCUC_SERVC','CAJUST_DIA_UTIL','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['IAPLIC_INTGC', 'CRESP_ULT_ATULZ'];tsicp_servc_tpo_movto",
"bs-dbricks-catalog-bare-tu;bronze;sicp_sit_lote_movto;['CSIT_LOTE_MOVTO','ISIT_LOTE_MOVTO','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['CSIT_LOTE_MOVTO','ISIT_LOTE_MOVTO','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['ISIT_LOTE_MOVTO'];tsicp_sit_lote_movto",
"bs-dbricks-catalog-bare-tu;bronze;sicp_sit_reg_intgc;['CSIT_REG_INTGC','ISIT_REG_INTGC','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['CSIT_REG_INTGC','ISIT_REG_INTGC','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['ISIT_REG_INTGC'];tsicp_sit_reg_intgc",
"bs-dbricks-catalog-bare-tu;bronze;sicp_titlo_cobr;['NSEQ_TITLO_COBR','CRZ_CTA_CORR_SACDO','CSIT_TITLO','CTPO_ERRO','CVDDOR_ADM_CATAO','DENVIO_COBR','DFNAL_VGCIA_PCELA','DINIC_VGCIA_PCELA','DPGTO_TITLO','DRETOR_BCO','DVCTO_PCELA','ICDENT','IPSSOA_CATAO_CREDT','NCOD_SEGRC_CATAO','NCTA_CORR_SACDO','NTITLO_COBR','RCIA_TITLO','RCOMPL_LOGDR','RINFO_COMPL','RLIN_PGTO_UM','RMOEDA_PCELA_COBR','VACRES_DIVRS','VDESC_PCELA','VDESP_TARIF_COBR','VMORA_DIA','VPCELA_COBR','VPG_TITLO','VMULTA_ATRSO_PCELA','VIOF','VDESP_DIVRS','VCOMIS_CATAO_CREDT','RMSGEM_ERRO_SQL','RLOGDR_SEGRD','RLIN_PGTO_DOIS','RERRO_TBELA_SQL','RCOD_BARRA_TITLO','QPCELA','NMES_ANO_VALDD','NDV_TITLO_COBR','NCONTR_SIST_ORIGE','ISACDO','ICIDDE_SEGRD','IBAIRO_SEGRD','DRETOR_COBR','DRCOLH_IOF','DLIM_PGTO_PCELA','DINCL_COBR','DENVIO_IMPRE','DEMIS_PCELA','CTPO_PCELA_COBR','CSUCUR_SEGDR','CSGL_UF','CPCELA_ADM_CATAO','CDV_AG_CDENT','CDV_CCORR_CDENT','CDV_CTA_CORR_SACDO','CDV_TITLO_COBR','CFORMA_COBR_PCELA','CFORMA_IMPRE_BLETO','CFORMA_PGTO_PCELA','CIND_CATAO_EMTDO_BDSCO','CIND_IMPRE','CINSPT_CRRTR','CNRO_CEP','CNRO_LOGDR_SEGRD','CORIGE_COBR','CNRO_CATAO_CREDT','CIND_BLETO_ONLINE','CERRO_SQL','CDV_AG_SACDO','CBCO_CDENT','CBCO_SACDO','CCPF_CNPJ_SEGRD','CCTA_CORR_CDENT','CCPD_CRRTR','CAG_BCRIA_SACDO','CAG_BCRIA_CDENT','CADM_CATAO_CREDT','AINCL_REG','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];['CAG_BCRIA_CDENT', 'CDV_AG_CDENT', 'CCTA_CORR_CDENT', 'CDV_CCORR_CDENT', 'CBCO_SACDO', 'CAG_BCRIA_SACDO', 'CDV_AG_SACDO', 'NCTA_CORR_SACDO', 'CDV_CTA_CORR_SACDO', 'CRZ_CTA_CORR_SACDO', 'CADM_CATAO_CREDT', 'CNRO_CATAO_CREDT', 'CPCELA_ADM_CATAO', 'NCOD_SEGRC_CATAO', 'IPSSOA_CATAO_CREDT', 'NMES_ANO_VALDD', 'CIND_CATAO_EMTDO_BDSCO', 'ICDENT', 'CCPF_CNPJ_SEGRD', 'RLOGDR_SEGRD', 'CNRO_LOGDR_SEGRD', 'CNRO_CEP', 'IBAIRO_SEGRD', 'ICIDDE_SEGRD', 'ISACDO', 'RCOMPL_LOGDR'];['NSEQ_TITLO_COBR','CRZ_CTA_CORR_SACDO','CSIT_TITLO','CTPO_ERRO','CVDDOR_ADM_CATAO','DENVIO_COBR','DFNAL_VGCIA_PCELA','DINIC_VGCIA_PCELA','DPGTO_TITLO','DRETOR_BCO','DVCTO_PCELA','ICDENT','IPSSOA_CATAO_CREDT','NCOD_SEGRC_CATAO','NCTA_CORR_SACDO','NTITLO_COBR','RCIA_TITLO','RCOMPL_LOGDR','RINFO_COMPL','RLIN_PGTO_UM','RMOEDA_PCELA_COBR','VACRES_DIVRS','VDESC_PCELA','VDESP_TARIF_COBR','VMORA_DIA','VPCELA_COBR','VPG_TITLO','VMULTA_ATRSO_PCELA','VIOF','VDESP_DIVRS','VCOMIS_CATAO_CREDT','RMSGEM_ERRO_SQL','RLOGDR_SEGRD','RLIN_PGTO_DOIS','RERRO_TBELA_SQL','RCOD_BARRA_TITLO','QPCELA','NMES_ANO_VALDD','NDV_TITLO_COBR','NCONTR_SIST_ORIGE','ISACDO','ICIDDE_SEGRD','IBAIRO_SEGRD','DRETOR_COBR','DRCOLH_IOF','DLIM_PGTO_PCELA','DINCL_COBR','DENVIO_IMPRE','DEMIS_PCELA','CTPO_PCELA_COBR','CSUCUR_SEGDR','CSGL_UF','CPCELA_ADM_CATAO','CDV_AG_CDENT','CDV_CCORR_CDENT','CDV_CTA_CORR_SACDO','CDV_TITLO_COBR','CFORMA_COBR_PCELA','CFORMA_IMPRE_BLETO','CFORMA_PGTO_PCELA','CIND_CATAO_EMTDO_BDSCO','CIND_IMPRE','CINSPT_CRRTR','CNRO_CEP','CNRO_LOGDR_SEGRD','CORIGE_COBR','CNRO_CATAO_CREDT','CIND_BLETO_ONLINE','CERRO_SQL','CDV_AG_SACDO','CBCO_CDENT','CBCO_SACDO','CCPF_CNPJ_SEGRD','CCTA_CORR_CDENT','CCPD_CRRTR','CAG_BCRIA_SACDO','CAG_BCRIA_CDENT','CADM_CATAO_CREDT','DINCL_REG','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];['CCPF_CNPJ_SEGRD','CNRO_CEP'];['CDV_TITLO_COBR', 'CIND_IMPRE', 'CIND_BLETO_ONLINE', 'CDV_AG_CDENT', 'CDV_CCORR_CDENT', 'RMOEDA_PCELA_COBR', 'NCONTR_SIST_ORIGE', 'RINFO_COMPL', 'CFORMA_COBR_PCELA', 'CDV_AG_SACDO', 'RCIA_TITLO', 'RCOD_BARRA_TITLO', 'RLIN_PGTO_UM', 'RLIN_PGTO_DOIS', 'CNRO_CATAO_CREDT', 'IPSSOA_CATAO_CREDT', 'CIND_CATAO_EMTDO_BDSCO', 'CORIGE_COBR', 'ICDENT', 'RERRO_TBELA_SQL', 'RMSGEM_ERRO_SQL', 'CCPF_CNPJ_SEGRD', 'RLOGDR_SEGRD', 'IBAIRO_SEGRD', 'ICIDDE_SEGRD', 'ISACDO', 'RCOMPL_LOGDR', 'CSGL_UF'];tsicp_titlo_cobr",
"bs-dbricks-catalog-bare-tu;bronze;sicp_tpo_comsn;['CTPO_COMSN','RTPO_COMSN','ITPO_COMSN','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['CTPO_COMSN','RTPO_COMSN','ITPO_COMSN','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['ITPO_COMSN', 'RTPO_COMSN'];tsicp_tpo_comsn",
"bs-dbricks-catalog-bare-tu;bronze;sicp_tpo_erro_movto;['CTPO_ERRO_MOVTO','DULT_ATULZ','ITPO_ERRO_MOVTO','DINIC_VGCIA_REG','DFIM_VGCIA','CTPO_INCON_MOVTO','CRESP_ULT_ATULZ','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['CTPO_ERRO_MOVTO','DULT_ATULZ','ITPO_ERRO_MOVTO','DINIC_VGCIA_REG','DFIM_VGCIA','CTPO_INCON_MOVTO','CRESP_ULT_ATULZ','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['CTPO_INCON_MOVTO', 'ITPO_ERRO_MOVTO', 'CRESP_ULT_ATULZ'];tsicp_tpo_erro_movto",
"bs-dbricks-catalog-bare-tu;bronze;sicp_tpo_estbl;['CTPO_ESTBL','ITPO_ESTBL','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['CTPO_ESTBL','ITPO_ESTBL','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['ITPO_ESTBL'];tsicp_tpo_estbl",
"bs-dbricks-catalog-bare-tu;bronze;sicp_tpo_movto_negoc;['CTPO_MOVTO_NEGOC','ITPO_MOVTO_NEGOC','RTPO_MOVTO_NEGOC','CTPO_MOVTO_SUSEP','CORIGE_MOVTO_NEGOC','CIND_MOVTO_NEGOC_ATIVO','CCLASS_MOVTO_NEGOC','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['CTPO_MOVTO_NEGOC','ITPO_MOVTO_NEGOC','RTPO_MOVTO_NEGOC','CTPO_MOVTO_SUSEP','CORIGE_MOVTO_NEGOC','CIND_MOVTO_NEGOC_ATIVO','CCLASS_MOVTO_NEGOC','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['ITPO_MOVTO_NEGOC', 'RTPO_MOVTO_NEGOC', 'CIND_MOVTO_NEGOC_ATIVO'];tsicp_tpo_movto_negoc",
"bs-dbricks-catalog-bare-tu;bronze;sicp_tpo_movto_prodt_sist;['CSIST','CPRODT_ORIGE','CTPO_MOVTO_NEGOC','CIND_REG_ATIVO','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['CSIST','CPRODT_ORIGE','CTPO_MOVTO_NEGOC','CIND_REG_ATIVO','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['CSIST', 'CIND_REG_ATIVO'];tsicp_tpo_movto_prodt_sist",
"bs-dbricks-catalog-bare-tu;bronze;sicp_tpo_reg_lote;['CTPO_REG','ITPO_REG','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['CTPO_REG','ITPO_REG','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['ITPO_REG'];tsicp_tpo_reg_lote",
"bs-dbricks-catalog-bare-tu;bronze;sicp_tpo_reg_tpo_movto;['CTPO_REG','CTPO_MOVTO_NEGOC','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['CTPO_REG','CTPO_MOVTO_NEGOC','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];[];tsicp_tpo_reg_tpo_movto",
"bs-dbricks-catalog-bare-tu;bronze;sicp_tpo_retor_reg_sap;['CTPO_RETOR_REG_SAP','OREG_ATIVO','ITPO_RETOR_REG_SAP','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['CTPO_RETOR_REG_SAP','CREG_ATIVO','ITPO_RETOR_REG_SAP','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['ITPO_RETOR_REG_SAP', 'CREG_ATIVO'];tsicp_tpo_retor_reg_sap",
"bs-dbricks-catalog-bare-tu;bronze;sicp_vrsao_contr_segur;['NCONTR_SEGUR','NVRSAO_CONTR','DFIM_VGCIA','DINIC_VGCIA','NENDSS','NENDSS_ORIGE','NPPSTA','PDESC_SEGRD','QAVERB_FAT','QPCELA','VCUSTO_EMIS_APOLC','VCUSTO_VIST_EXCED','VPROLB_ESTTE','NPCELA_COBR_CATAO_CREDT','CTPO_ENDSS','CTPO_FREQ_PGTO','CTPO_MOVTO_FIP','CTPO_MOVTO_NEGOC','CTPO_MOVTO_SUSEP','CTPO_PRMIO_FIP','CTPO_RETOR_REG_SAP','DCANCT_CONTR','DEMIS_PPSTA','DEMIS_SEGUR','CTPO_DOCTO','CPCELA_ADM_CATAO','CPPSTA_ENVIO_SAP','CPSSOA_ESTTE','CPSSOA_SEGRD','CCRRTR_SEGUR','CCONVE_BCO','CCANAL_VDA','CBCO_PROTR','CAG_PROTR','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['NCONTR_SEGUR','NVRSAO_CONTR','DFIM_VGCIA','DINIC_VGCIA','NENDSS','NENDSS_ORIGE','NPPSTA','PDESC_SEGRD','QAVERB_FAT','QPCELA','VCUSTO_EMIS_APOLC','VCUSTO_VIST_EXCED','VPROLB_ESTTE','NPCELA_COBR_CATAO_CREDT','CTPO_ENDSS','CTPO_FREQ_PGTO','CTPO_MOVTO_FIP','CTPO_MOVTO_NEGOC','CTPO_MOVTO_SUSEP','CTPO_PRMIO_FIP','CTPO_RETOR_REG_SAP','DCANCT_CONTR','DEMIS_PPSTA','DEMIS_SEGUR','CTPO_DOCTO','CPCELA_ADM_CATAO','CPPSTA_ENVIO_SAP','CPSSOA_ESTTE','CPSSOA_SEGRD','CCRRTR_SEGUR','CCONVE_BCO','CCANAL_VDA','CBCO_PROTR','CAG_PROTR','DHORA_IGTAO_CTRL','DMOVTO_CTRL','DANOMES_MOVTO_CTRL','IARQ_IGTAO_CTRL'];[];['CPPSTA_ENVIO_SAP'];tsicp_vrsao_contr_segur"
)

# COMMAND ----------

#* Máscaras que serão removidas dos CPF, CNPJ e CEP
listaCaracteres=(
    "-",
    "_",
    "/",
    "."
)

# COMMAND ----------

#* CRIA TABELAS NA CAMADA SILVER
#* Cria estrutura de dataframe para receber informações de logs de execução
dfPdLogTemp  = pd.DataFrame(columns=['schema','tabela','status','observacao','dataExec','hora'])
#* Hora de início do prcesso
dtInicial = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
#* Conecta no catalogo acessa o schema bronze e cria o schema silver se não existe
spark.sql("use catalog `{}`".format(STR_CATALOGO))
spark.sql("use `{}`".format(BRONZE_SCHEMA))
spark.sql("CREATE SCHEMA IF NOT EXISTS {}".format(SILVER_SCHEMA))
#* Total de tabelas 
countTabela=0
#* Total de tabelas que serao criptografadas
countRash=0
#* Loop para criação das tabelas com as informações contidas na 'listaSchemaDelta'
for tb in listaSchemaDelta:
    countTabela+=1
    catalogo,sch,tb,strColunas,strRash,colunaPadraoT,colTransforma,colIsString,tbPadraoT=tb.split(";")
    viewPadraoT="v"+tbPadraoT[1:]
    try:
        spark.sql("use catalog `{}`".format(catalogo))
    except:
        print("CATALOGO [{}] NAO EXISTE".format(catalogo))
    else:
        try:
            spark.sql("use {}".format(sch))
        except:
            print("SCHEMA [{}] NAO EXISTE".format(sch))
        else:
            try:
                testTable=spark.sql("SELECT * FROM {} LIMIT 1;".format(tb))
            except:
                print("TABELA [ {} ] NAO EXISTE.".format(tb))
            else:
                #* Inicia o comando de criação de tabela
                criaTabela=""
                #* O conta virgula é utilizado para saber quantas colunas uma tabela possui
                contaVirgula=strColunas.count(",")
                contaVirgula+=1
                #* Elimina o colchete das variaveis para pegar as informações de colunas
                columnaTabela=strColunas.replace("[","").replace("]","")
                colunaPThesaurus=colunaPadraoT.replace("[","").replace("]","")
                print("TABELA [{}] [{}] QUANT COLUNAS [{}]".format(countTabela,tb,contaVirgula))
                #* Data e hora de início do processo
                dtH = datetime.now().strftime("%d-%m-%Y %H:%M:%S")
                print("Inicio {}".format(dtH))
                #* Comando que cria tabela com nome no padrão thesaurus
                criaTabela="create or replace table {}.{} \n AS SELECT\n".format(SILVER_SCHEMA,tbPadraoT)
                #* Identificação que será utilizada na criação das views para criptografar ou nao
                #* RASHED
                if strRash == '[]':
                    #* Cria contador para controle de final de comando
                    contador=1
                    #* Referencia a coluna nao padronizada no thesaurus
                    refColPadrao=0
                    #* Elimina as aspas simples para pegar os nomes de colunas e montar o SQL
                    colunaPThesaurus=colunaPThesaurus.replace("'","")
                    #* Monta os comandos SQL renomeando as colunas no padrão thesaurus
                    for coluna in columnaTabela.split(","):
                        #* Pega o nome da coluna no padrão thesaurus com referencia a coluna nao padronizada
                        colPTH=colunaPThesaurus.split(",")[refColPadrao]
                        coluna=coluna.replace("'","")
                        #* Controle para identificar o final do comando
                        if contador != contaVirgula:
                            criaTabela = criaTabela + "\n{0} as {1},".format(coluna,colPTH)
                        else:
                            criaTabela=criaTabela + "\n{2} as {3} FROM {0}.{1}".format(sch,tb,coluna,colPTH)
                        contador=contador + 1
                        refColPadrao=refColPadrao + 1
                #* RASHED
                else:
                    #* Cria contador para controle de final de comando
                    contador=1
                    #* Referencia a coluna nao padronizada no thesaurus
                    refColPadrao=0
                    colunaPThesaurus=colunaPThesaurus.replace("'","")
                    #* Monta os comandos SQL renomeando as colunas no padrão thesaurus
                    for coluna in columnaTabela.split(","):
                        colPTH=colunaPThesaurus.split(",")[refColPadrao]
                        coluna=coluna.replace("'","")
                        #* Controle para saber se uma coluna será renomeada ou não quando criptografada
                        #* pois quando a coluna é criptografada ela recebe o nome da coluna + ANOMIZA
                        if coluna in strRash:
                            colTemp = coluna.replace("'","")
                            criaTabela=criaTabela + "\n{0}".format(colTemp)
                        else:
                            coluna = coluna.replace("'","")
                            criaTabela = criaTabela + "\n{0} as {1}".format(coluna,colPTH)
                        #* Controle para identificar o final do comando
                        if contador < contaVirgula:
                            criaTabela=criaTabela + ",\n"
                        else:
                            criaTabela=criaTabela + "\nFROM {}.{}".format(sch,tb)
                        contador=contador + 1
                        refColPadrao=refColPadrao + 1
                countRash+=1
                try:
                    #* Cria as tabelas depois de criado os comando acima
                    #print("---------------------------------------------------")
                    #print(criaTabela)
                    #print("---------------------------------------------------")
                    spark.sql(criaTabela)
                except Exception as e:
                    print("********************** ERRO *********************\n")
                    #print(e)
                    print(criaTabela)
                    #* Seta data e hora para inclusão no log de execução
                    dt = datetime.now().strftime("%Y-%m-%d")
                    hr = datetime.now().strftime("%H:%M:%S")
                    #* Se finalizado com algum erro adiciona as informações no log
                    #* Monta informações de log
                    dicionario={'schema':SILVER_SCHEMA,'tabela':tbPadraoT,'status':'ERRO','observacao':e,'dataExec':dt,'hora':hr}
                    #* Adiciona o log no dataframe para depois apendar/concatenar no dataframe de log 
                    dfPdLogTemp=pd.DataFrame([dicionario])
                    #* Inclui/concatena informações no log
                    dfPdLog = pd.concat([dfPdLog, dfPdLogTemp],ignore_index=True)
                else:
                    #* Ações em cima de tabelas criadas
                    #* Remove espaços de todas as colunas que sao strings TRIM e UPPER
                    if colIsString != '[]':
                        for isStr in colIsString.split(","):
                            isStr=isStr.replace("[","").replace("]","").replace("'","")
                            sqlCM0=""
                            sqlCM1=""
                            #* Monta os comandos
                            sqlCM0="update {}.{} set ".format(SILVER_SCHEMA,tbPadraoT)+isStr+"=trim("+isStr+");"
                            sqlCM1="update {}.{} set ".format(SILVER_SCHEMA,tbPadraoT)+isStr+"=upper("+isStr+");"
                            #* Executa os comandos
                            print("*******COMANDO 0 TRIM ***********")
                            print(sqlCM0)
                            print("*******COMANDO 1 UPPER ***********")
                            print(sqlCM1)
                            spark.sql(sqlCM0)     
                            spark.sql(sqlCM1) 
                    #* Remove as mascaras de CNPJ, CPF e CEP
                    if colTransforma != '[]':
                        for colunaT in colTransforma.split(","):
                            #* Retiras os colchetes e aspas simples para pegar os nomes das colunas
                            colunaT=colunaT.replace("[","").replace("]","").replace("'","")
                            #* Remove os caracteres para cada coluna de CNPJ, CPF e CEP
                            for strChar in listaCaracteres:
                                sqlCM2=""
                                #* Monta o comando sql para cada mascara que será removida
                                sqlCM2="update {}.{} set ".format(SILVER_SCHEMA,tbPadraoT)+colunaT+"= replace("+colunaT+",'{}'".format(strChar)+",'');"
                                #* executa o comando
                                print("*******COMANDO 2 MASCARAS ***********")
                                print(sqlCM2)
                                spark.sql(sqlCM2)
                    #* Seta data e hora para incluir no log de execução
                    dt = datetime.now().strftime("%Y-%m-%d")
                    hr = datetime.now().strftime("%H:%M:%S")
                    #* Monta informações de log que finalizaram com sucesso
                    dicionario={'schema':SILVER_SCHEMA,'tabela':tbPadraoT,'status':'SUCESSO','observacao':'Sucesso','dataExec':dt,'hora':hr}
                    #* Adiciona o log no dataframe para depois apendar/concatenar no dataframe de log
                    dfPdLogTemp=pd.DataFrame([dicionario])
                    #* Inclui/concatena informações no log
                    dfPdLog = pd.concat([dfPdLog, dfPdLogTemp],ignore_index=True)
        #* Data e hora de final de processo para cada criação de tabela
        dtH = datetime.now().strftime("%d-%m-%Y %H:%M:%S")
        print("Fim {}".format(dtH))  
#* Tipo dos atributos como string type    
dfPdLog=dfPdLog.astype(str)
#* Adicona os logs do pandas dataframe para um spark dataframe para depois disponibilizar as informações em uma tabela de log
spkDf = spark.createDataFrame(dfPdLog)
print("TOTAL DE TABELAS CRIADAS [ {} ]".format(countTabela))

# COMMAND ----------

#* CRIA VIEWS NA CAMADA SILVER
spark.sql("use catalog `{}`".format(STR_CATALOGO))
spark.sql("use `{}`".format(SILVER_SCHEMA))
spark.sql("CREATE SCHEMA IF NOT EXISTS {}".format(SILVER_SCHEMA))
#* Total de tabelas 
countTabela=0
#* Total de tabelas que serao criptografadas
countRash=0
for tb in listaSchemaDelta:
    countTabela+=1
    catalogo,sch,tb,strColunas,strRash,colunaPadraoT,colTransforma,colIsString,tbPadraoT=tb.split(";")
    viewPadraoT="v"+tbPadraoT[1:]
    tbT=tb
    tb="t"+tb.lower()
    try:
        spark.sql("use catalog `{}`".format(catalogo))
    except:
        print("CATALOGO [{}] NAO EXISTE".format(catalogo))
    else:
        try:
            spark.sql("use {}".format(SILVER_SCHEMA))
        except:
            print("SCHEMA [{}] NAO EXISTE".format(SILVER_SCHEMA))
        else:
            try:
                testTable=spark.sql("SELECT * FROM {} LIMIT 1;".format(tb))
            except:
                print("TABELA [ {} ] NAO EXISTE.".format(tb))
            else:
                criaView=""
                contaVirgula=strColunas.count(",")
                contaVirgula+=1
                columnaTabela=strColunas.replace("[","").replace("]","")
                colunaPThesaurus=colunaPadraoT.replace("[","").replace("]","")
                print("TABELA [{}] [{}] QUANT COLUNAS [{}]".format(countTabela,tb,contaVirgula))
                criaView="create or replace view {}.{} \n AS SELECT\n".format(SILVER_SCHEMA,viewPadraoT)
                #* NOT RASHED
                if strRash == '[]':
                    contador=1
                    refColPadrao=0
                    colunaPThesaurus=colunaPThesaurus.replace("'","")
                    for coluna in columnaTabela.split(","):
                        colPTH=colunaPThesaurus.split(",")[refColPadrao]
                        coluna=coluna.replace("'","")
                        if contador != contaVirgula:
                            criaView = criaView + "\n{0} as {0},".format(colPTH)
                        else:
                            criaView=criaView + "\n{2} as {2} FROM {0}.{1}".format(SILVER_SCHEMA,tbPadraoT,colPTH)
                        contador=contador + 1
                        refColPadrao=refColPadrao + 1
                #* RASHED
                else:
                    countRash+=1
                    contador=0
                    refColPadrao=0
                    colunaPThesaurus=colunaPThesaurus.replace("'","")
                    for coluna in columnaTabela.split(","):
                        contador=contador + 1
                        colPTH=colunaPThesaurus.split(",")[refColPadrao]
                        coluna=coluna.replace("'","")
                        if coluna in strRash:
                            colTemp = coluna.replace("'","")
                            criaView=criaView + "\n{0}, ".format(colPTH)+"case when is_member('"+STR_GROUP_MEMBER+"') then " +"{0}".format(colPTH)+"  else CAST(SHA2(CAST( '"+SALT_VALUE1+"' || cast({} as string) || '".format(colPTH) +SALT_VALUE2+"' AS BINARY), 256) AS STRING) END AS {}ANOMIZA".format(colPTH)
                        else:
                            coluna = coluna.replace("'","")
                            if contador != contaVirgula:
                                criaView = criaView + "\n{0} as {0}".format(colPTH)
                        if contador < contaVirgula:
                            criaView=criaView + ",\n"
                        else:
                            criaView=criaView + "\n{2} as {2} FROM {0}.{1}".format(SILVER_SCHEMA,tbPadraoT,colPTH)
                        refColPadrao=refColPadrao + 1
                try:
                    print("***************** PRINTA VIEW *****************")
                    print(criaView)
                    spark.sql(criaView)
                except Exception as e:
                    print("********************** ERRO *********************\n")
                    #print(e)
                    print(criaView)
                    dt = datetime.now().strftime("%Y-%m-%d")
                    hr = datetime.now().strftime("%H:%M:%S")
                    dicionario={'schema':SILVER_SCHEMA,'tabela':viewPadraoT,'status':'ERRO','observacao':e,'dataExec':dt,'hora':hr}
                    dfPdLogTemp=pd.DataFrame([dicionario])
                    dfPdLog = pd.concat([dfPdLog, dfPdLogTemp],ignore_index=True)
                else:
                    dt = datetime.now().strftime("%Y-%m-%d")
                    hr = datetime.now().strftime("%H:%M:%S")
                    dicionario={'schema':SILVER_SCHEMA,'tabela':viewPadraoT,'status':'SUCESSO','observacao':'Sucesso','dataExec':dt,'hora':hr}
                    dfPdLogTemp=pd.DataFrame([dicionario])
                    dfPdLog = pd.concat([dfPdLog, dfPdLogTemp],ignore_index=True)        
dtFinal = dt = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
dfPdLog=dfPdLog.astype(str)
spkDf = spark.createDataFrame(dfPdLog)
print("\nTOTAL DE VIEWS CRIADAS [ {} ]".format(countTabela))
print("TOTAL DE VIEWS QUE CONTEM DADOS CRIPTOGRAFADOS [ {} ]".format(countRash))
print("\nDATA HORA INICIAL DO PROCESSO [ {} ]".format(dtInicial))
print("DATA HORA FINAL DO PROCESSO     [ {} ]".format(dtFinal))

# COMMAND ----------

dfPdLog

# COMMAND ----------

#* LOGS EXECUCAO + EXPURGO
#* Conecta na base e cria tabela de log a partir do spark datafrma
spark.sql("use catalog `{}`".format(STR_CATALOGO))
spark.sql("CREATE SCHEMA IF NOT EXISTS {}".format(LOG_SCHEMA))
spark.sql("use `{}`".format(LOG_SCHEMA))
#* Cria tabela apndando as informações de log
spkDf.write.mode("append").format("delta").saveAsTable(LOG_TABLE)
hoje_dt = date.today()
#* Data para expurgo D-2
data_expurgo = hoje_dt - relativedelta(days = 2)
print(data_expurgo)
#* Monta comando de expurgo
sqlExpurgo="delete from silver_logs where dataExec < '{}'".format(data_expurgo)
#* Executa o expurgo
spark.sql(sqlExpurgo)

# COMMAND ----------

# MAGIC %sql
# MAGIC select * from `bronze`.`sicp_titlo_cobr`  where NSEQ_TITLO_COBR=3561;

# COMMAND ----------

# MAGIC %sql
# MAGIC select * from `silver`.`tsicp_titlo_cobr` where NSEQ_TITLO_COBR=3561;;
